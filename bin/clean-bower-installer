#!/usr/bin/env node
'use strict';

process.bin = process.title = 'clean-bower-installer';

var path = require('path'),
	fs = require('fs-extra'),
	bower = require('bower'),
	colors = require('colors/safe'),
	glob = require("glob"),
	pkg = require("../package.json");

//Regex
var regex = {
	startWithSlash: new RegExp('^\/.*'),
	containAsterisk: new RegExp('\\*', 'g'),
	containDoubleAsterisk: new RegExp('[\\*]{2}', 'g'),
	containMin: new RegExp('\.min', 'g')
};

var bowerPath,
	cwd = process.cwd(),
	directory,
	getMin = false,
	renameMin = false;

var option = {
		"default": {
			"folder": "",
			"minFolder": ""
		},
		"min": {
			"get": false,
			"rename": false
		},
		"removeAfter": false
	},
	folder = {},
	source = {};

/* CLI section ********************************************************************************************************/
if (require.main === module) {
	var cli = require("cli");

	// Version display
	cli.enable('version');
	cli.setApp(pkg.name, pkg.version);

	// CLI options
	cli.parse({
		install: ['i', 'Run bower install command'],
		update: ['u', 'Run bower update command'],
		bower: [false, 'Input the bower.json file path.', 'path', '' ],
		min: ['m', 'Try to get .min file version first.'],
		renameMin: ['M', 'Try to get .min file version first and keep the name specified in the bower.json file.']
	});

	// CLI input treatment
	cli.main(function(args, options) {
		bowerPath = path.join(cwd, options.bower);

		if (options.renameMin) {
			getMin = true;
			renameMin = true;
		} else if (options.min) {
			getMin = true;
			renameMin = false;
		} else {
			getMin = false;
			renameMin = false;
		}

		if (options.install) {
			bower.commands.
				install(undefined, undefined, { cwd: bowerPath }).
				on('end', function(installed) {
					console.log(installed);

					runCBI();
				});
		} else if (options.update) {
			bower.commands.
				update(undefined, undefined, { cwd: bowerPath }).
				on('end', function(updated) {
					console.log(updated);

					runCBI();
				});
		} else {
			runCBI();
		}
	});
}
/* Execution **********************************************************************************************************/

/**
 * Clean-Bower-Install main logic function
 */
function runCBI() {
	var bowerJSON;

	if (testIfPathExist(path.join(bowerPath, 'bower.json'))) {
		bowerJSON = require(path.join(bowerPath, 'bower.json'));
	} else {
		console.error('No bower.json file found in the folder: ' + bowerPath);
		process.exit(1);
	}

	// Read .bowerrc config
	var config = require('bower-config').read();
	directory = config.directory;
	cwd = config.cwd;

	// Test if the bower folder exist
	if (!fs.existsSync(directory)) {
		console.error(colors.red('Their is no loaded bower libs on your computer. Add the install option and retry the module execution.'));
		process.exit(1);
	}

	// Read bower.json cInstall data
	var cInstall = bowerJSON.cInstall;
	if (cInstall !== undefined) {
		if (cInstall.option !== undefined) {
			// To add only new option specified by the user
			for (var setup in cInstall.option) {
				if (cInstall.option.hasOwnProperty(setup) && option.hasOwnProperty(setup)) {
					if (typeof cInstall.option[setup] === 'object') {

						for (var subSetup in cInstall.option[setup]) {
							if (cInstall.option[setup].hasOwnProperty(subSetup) && option[setup].hasOwnProperty(subSetup)) {
								option[setup][subSetup] = cInstall.option[setup][subSetup];
							}
						}

					} else if (typeof option[setup] !== 'object') {
						option[setup] = cInstall.option[setup];
					} else {
						console.error(colors.red('Wrong format enter for "'+setup+'" in the bower.json file.'));
						process.exit(1);
					}
				}
			}
		}

		// Only if no min option already specified (via CLI -m or -M or via API runMin() or runMinR())
		if (getMin == false && renameMin == false) {
			if (option.min.hasOwnProperty('get') && option.min.get == true) {
				getMin = true;

				// Because rename is ignored if min.get is false
				if (option.min.hasOwnProperty('rename') && option.min.rename == true) {
					renameMin = true;
				}
			}
		}

		if (cInstall.folder !== undefined) {
			folder = cInstall.folder;
			var typeInTreatment;
			for (var fileType in folder) {
				if (folder.hasOwnProperty(fileType)) {
					typeInTreatment = fileType.replace(/\s/g, '').split(',');

					// Split into multiple value comma divided chunk
					var length = typeInTreatment.length;
					if (length > 1) {
						for (var i = 0; i < length; i++) {
							folder[typeInTreatment[i]] = folder[fileType];
						}
					}
				}
			}
		}

		if (cInstall.source !== undefined) {
			source = cInstall.source;
		}

		copyFiles();

	} else {
		console.log(colors.yellow('clean-bower-install execution can not be done because no \'cInstall\' section were found in the bower.json file.'));
	}
}

/**
 * Verify that the specified path exist
 *
 * @param path {string}
 * @returns {boolean}
 */
function testIfPathExist(path) {
	return fs.existsSync(path);
}

/**
 * Move the files from the bower repository to their destination
 */
function copyFiles() {
	var file, length, i, filesToMove = generateFileList();

	// If file list generation was stop by error
	if (filesToMove === false) {
		return;
	}

	// Copy and rename (if needed) files in the filesToMove array
	length = filesToMove.length;
	for (i = 0; i < length; i++) {
		file = filesToMove[i];
		fs.copy(file.from, path.join(file.to, file.rename), function(err) {
			if (err && err[0].code != 'ENOENT') {
				return console.error(err);
			}
		});
	}
}

/**
 * Generate the list of the file to copy and their destination
 *
 * @returns {Array|boolean}
 */
function generateFileList() {
	var filesToMove = [], libFolder = '', libName = '', file, fileNameAndExt, fileName, fileFolder,
		extension, temp, currLib, length, i, asteriskName, f, df;

	// For each lib in the source section
	for (var lib in source) {
		if (source.hasOwnProperty(lib)) {
			temp = lib.split('#');
			libName = temp[0];
			libFolder = temp[1] || '';
			currLib = source[lib];

			// For each files to get in the lib
			for (file in currLib) {
				if (currLib.hasOwnProperty(file)) {
					temp = file.split('#');
					fileNameAndExt = temp[0] || '*';
					fileName = path.basename(fileNameAndExt, path.extname(fileNameAndExt));
					fileFolder = temp[1] || '';
					extension = path.extname(fileNameAndExt).substr(1);

					// Because of the rename function and the folder specification, the Globstar" ** matching of glob can't be use
					if (regex.containDoubleAsterisk.test(currLib[file])) {
						console.error(colors.red('The "Globstar" ** matching wan\'t support by CLEAN-BOWER-INSTALLER. You have to specify each folder and their destination if you really need it.'));
						console.error(colors.red('Please correct the source: ' + libName));
						return false;
					}

					// List files who fit the
					var files = glob.sync(path.join(bowerPath, directory, libName, currLib[file]));

					// Add the needed folders to the Array filesToMove
					length = files.length;
					asteriskName = false;

					for (i = 0; i < length; i++) {
						f = files[i];

						if (regex.containAsterisk.test(fileName)) {
							asteriskName = true;
						}

						// Use the name of the file to replace the * (asterisk) name
						if (asteriskName) {
							fileName = path.basename(f, path.extname(f));
						}

						// Try to find the min file here
						if (getMin) {
							if (!regex.containMin.test(f)) {
								var tempName = f.replace(path.extname(f), '') + '.min' + path.extname(f);
								if (fs.existsSync(tempName)) {
									f = tempName;
									if (!renameMin) {
										fileName += '.min';
									}
								}
							}
						}

						// Test if the link is global or relative
						if (regex.startWithSlash.test(fileFolder)) {
							// The specified file folder is global
							filesToMove.push({
								'from': f,
								'to': path.join(bowerPath, fileFolder.substr(1)),
								'rename': fileName + path.extname(f)
							});
						} else if (regex.startWithSlash.test(libFolder)) {
							// The specified lib folder is global
							filesToMove.push({
								'from': f,
								'to': path.join(bowerPath, libFolder.substr(1), fileFolder),
								'rename': fileName + path.extname(f)
							});
						} else {
							// Test if redirect the file to the minDefault folder or the default folder
							if (getMin && option.default.minFolder != "") {
								df = (option.default.minFolder);
							} else if (option.default.folder != "") {
								df = (option.default.folder);
							} else {
								df = "";
							}

							// None of the file or lib specified folder is global
							filesToMove.push({
								'from': f,
								'to': path.join(bowerPath, df, folder[path.extname(f).substr(1)], libFolder, fileFolder),
								'rename': fileName + path.extname(f)
							});
						}
					}
				}
			}
		}
	}
	return filesToMove;
}

/* API commands *******************************************************************************************************/

/**
 * This object contain all the API commands for this module
 *
 * @type {{install: install, update: update, run: run}}
 */
var commands = {
	/**
	 * Use the bower programmatic API to call the install command
	 *
	 * @param [bowerCustomConfig] {object}
	 * @returns {*}
	 */
	install: function(bowerCustomConfig) {
		bowerCustomConfig = bowerCustomConfig || {};

		if (bowerCustomConfig.hasOwnProperty('cwd')) {
			bowerPath = path.join(cwd, bowerCustomConfig.cwd);
		}

		return bower.commands
			.install(undefined, { json: true }, bowerCustomConfig);
	},
	/**
	 * Use the bower programmatic API to call the update command
	 *
	 * @param [bowerCustomConfig] {object}
	 * @returns {*}
	 */
	update: function(bowerCustomConfig) {
		bowerCustomConfig = bowerCustomConfig || {};

		if (bowerCustomConfig.hasOwnProperty('cwd')) {
			bowerPath = path.join(cwd, bowerCustomConfig.cwd);
		}

		return bower.commands
			.update(undefined, { json: true }, bowerCustomConfig);
	},
	/**
	 * Execute clean-bower-installer main goal
	 *
	 * @param [bowerFilePath] {string}
	 */
	run: function(bowerFilePath) {
		getMin = false;
		renameMin = false;

		bowerPath = path.join(cwd, bowerFilePath || '');

		runCBI();
	},
	/**
	 * Execute clean-bower-installer main goal with min option
	 *
	 * @param [bowerFilePath] {string}
	 */
	runMin: function(bowerFilePath) {
		getMin = true;
		renameMin = false;

		bowerPath = path.join(cwd, bowerFilePath || '');

		runCBI();
	},
	/**
	 * Execute clean-bower-installer main goal with min and rename option
	 *
	 * @param [bowerFilePath] {string}
	 */
	runMinR: function(bowerFilePath) {
		getMin = true;
		renameMin = true;

		bowerPath = path.join(cwd, bowerFilePath || '');

		runCBI();
	}
};

module.exports = {
	install: commands.install,
	update: commands.update,
	run: commands.run,
	runMin: commands.runMin,
	runMinR: commands.runMinR
};